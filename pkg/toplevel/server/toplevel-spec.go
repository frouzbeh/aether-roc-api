// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
